#!/bin/sh

fatal() {
    local RED="\033[0;31m"
    local BOLD="\033[1m"
    local RESET="\033[0m"
    printf "${RED}${BOLD}Error: %s${RESET}\n" "$1" >&2
    exit 1
}

success() {
    local GREEN="\033[0;32m"
    local RESET="\033[0m"
    printf "${GREEN}> %s${RESET}\n" "$1"
}

# Check for uncommitted changes
if [[ $(git status --porcelain) ]]; then
    fatal "You have uncommitted changes. Please commit or stash them before proceeding."
fi

# Identify the main branch
main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
if [ -z "$main_branch" ] || [ "$main_branch" == "(unknown)" ]; then
    fatal "Unable to identify the main branch."
fi

# Check if a custom commit message is provided
if [ "$#" -eq 1 ]; then
    commit_message="$1"
else
    # Find the first commit message
    commit_message=$(git log --format=%B --reverse HEAD ^"$main_branch" | head -n 1)
    if [ -z "$commit_message" ]; then
        fatal "No commits found to squash, and no commit message provided."
    fi
fi

# Perform a soft reset to the main branch
git reset --soft $(git merge-base HEAD "$main_branch")
git commit -m "$commit_message"

success "Squash complete."
