#!/bin/sh

fatal() {
    local RED="\033[0;31m"
    local BOLD="\033[1m"
    local RESET="\033[0m"
    echo -e "${RED}${BOLD}Error: $1${RESET}" >&2
    exit 1
}

info() {
    local BLUE="\033[0;34m"
    local RESET="\033[0m"
    printf "${BLUE}> %s${RESET}\n" "$1"
}

success() {
    local GREEN="\033[0;32m"
    local RESET="\033[0m"
    printf "${GREEN}> %s${RESET}\n" "$1"
}

# Check for correct usage
if [ $# -gt 1 ]; then
    fatal 'Incorrect usage, too many arguments. Use: git sync [-i]'
fi

# Handle interactive flag
interactive=false
if [ $# -eq 1 ]; then
    if [ "$1" == "-i" ]; then
        interactive=true
    else
        fatal "Incorrect usage, unexpected argument to git sync: \"$1\""
    fi
fi

# Check for uncommitted changes
if [[ $(git status --porcelain) ]]; then
    fatal "You have uncommitted changes, proceeding automatically would be dangerous."
fi

# Get current branch name
initial_branch=$(git branch --show-current)

# Update the main branch
main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
if [ -z "$main_branch" ] || [ "$main_branch" == "(unknown)" ]; then
    fatal "Unable to identify the main branch."
fi

if [ "$local_branch" = "$main_branch" ]; then
    git pull origin "$main_branch" --no-tags
    success "'$main_branch' synced with origin"
else
    git checkout "$main_branch"
    git pull origin "$main_branch" --no-tags
    git checkout "$initial_branch"

    # Rebase onto the main branch
    info "Rebasing $initial_branch on $main_branch"
    if $interactive; then
        git rebase -i "$main_branch"
    else
        git rebase "$main_branch"
    fi

    success "'$initial_branch' synced with origin, '$main_branch' rebased"
fi
